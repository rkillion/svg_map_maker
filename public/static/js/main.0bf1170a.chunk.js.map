{"version":3,"sources":["features/auth/userSlice.js","components/Appbar.js","features/shapes/pathFunctions.js","features/viewport/positioning.js","features/tiles/Tile.js","features/viewport/viewSlice.js","features/tiles/gridsSlice.js","features/viewport/Viewport.js","features/universes/universesSlice.js","features/worlds/worldsSlice.js","features/shapes/shapeTypesSlice.js","components/Sidebar.js","features/worlds/WorldCard.js","components/FormDialog.js","components/UniversePage.js","features/shapes/NewFeatureDialogue.js","features/shapes/FeaturesList.js","components/InfoBar.js","components/AuthenticatedApp.js","features/auth/Login.js","features/auth/Signup.js","components/UnauthenticatedApp.js","components/App.js","store.js","index.js"],"names":["userSlice","createSlice","name","initialState","current","status","reducers","userUpdate","state","action","payload","extraReducers","actions","Appbar","toggleDrawer","React","anchorEl","setAnchorEl","user","useSelector","dispatch","useDispatch","Box","sx","flexGrow","FormGroup","AppBar","position","Toolbar","IconButton","size","edge","color","mr","onClick","Typography","variant","component","id","event","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","MenuItem","fetch","method","then","res","ok","window","location","reload","style","changePath","viewportData","direction","tile","tile_width_units","tileSettings","point","unitXY","tileFocus","dimensions","viewPortWidth","x","width","clientX","y","height","clientY","clientXYtoUnitXY","relativeXY","targetPoint","targetXY","tileSize","route","target","length","compare","push","getQuadrantRoute","generatePathArray","originalArray","fill","newArray","JSON","parse","stringify","splitPath","traversePathArray","array","adjRoute","thisWidth","genUnitPath","slice","path","RegExp","test","quadrant","distance","pathM","pathR","Tile","centerImageMCoord","handleMouseDown","handleMouseUp","handleMouseMove","grids","primary","settings","coordinateOffsets","northeast","north","northwest","west","center","east","southwest","south","southeast","shapeTypes","entities","parsePath","shape","shapePath","path_array","pathArray","tileWidth","joinStrings","returnArray","joins","joinLevel","theArray","separators","q","pathStart","pathEnd","i","join","joinPath","path_zero","path_one","path_two","path_three","getColor","find","shapeClass","shape_class","shape_types","type","shape_type","shapes","map","d","onMouseDown","onMouseUp","onMouseMove","feature","title","viewSlice","userFocus","changeView","changeFocus","changeUserFocus","fetchGrids","createAsyncThunk","response","json","data","postMapEdits","pendingChanges","headers","body","gridsSlice","editingMode","mode","featureTitle","add","edit","changeEditingMode","addPendingChange","change","tileId","addShape","tiles","changeShapeArray","newShapeToChange","tile_id","existingShapeToChange","shapeToAddToEdits","pending","fulfilled","SVGCanvas","styled","svg","Viewport","useState","Math","min","innerHeight","innerWidth","setDimensions","dragPoint","setDragPoint","currentView","view","features","worlds","currentWorld","windowCenterUnit","centerImageEdgeDistancesUnits","s","focus_y","n","e","focus_x","w","tileIds","useEffect","debouncedHandleResize","fn","ms","timer","clearTimeout","setTimeout","apply","arguments","debounce","addEventListener","removeEventListener","initialFocus","adjustedFocus","newFocus","extraTileNorth","extraTileSouth","checkMaxHeight","shape_class_id","shape_type_id","newTile","displacement","newCoordinates","tile_to_get","manageReload","viewBox","xmlns","Object","keys","fetchUniverses","postUniverse","postConfig","universesSlice","universeAdded","universeUpdated","universe","changes","forEach","field","fetchWorlds","postWorld","worldsSlice","worldAdded","worldUpdated","world","console","log","addFeatureToWorld","fetchShapeTypes","shapeTypesSlice","shapeClassToggle","shapeTypeToggle","shapeType","TemporaryDrawer","sidebarState","setUniverseDialogueOpen","loadWorld","universes","history","useHistory","list","anchor","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","pl","Divider","Drawer","WorldCard","Card","maxWidth","raised","CardMedia","image","alt","CardContent","gutterBottom","CardActions","Button","FormDialog","formDialogueOpen","setFormDialogueOpen","formDialogueObject","item","formData","setFormData","handleClose","Dialog","DialogTitle","toUpperCase","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","newData","value","DialogActions","UniversePage","useParams","parseInt","DisplayBox","Accordion","AccordionSummary","expandIcon","AccordionDetails","CardArea","universe_id","max_zoom_level","div","NewFeatureDialogue","featureStarterData","setFeatureStarterData","FeaturesList","ClassIcon","classTitle","bgcolor","subheader","ListSubheader","ListItemButton","Collapse","in","timeout","unmountOnExit","disablePadding","Tooltip","shapeClassId","shapeTypeId","starterData","world_id","openNewFeatureDialogue","filter","InfoBar","Paper","elevation","display","marginTop","marginLeft","minHeight","AuthenticatedApp","top","left","bottom","right","setSidebarState","key","universeDialogueOpen","views","to","Login","username","setUsername","password","setPassword","handleSubmit","preventDefault","errors","error","flexWrap","justifyContent","padding","m","FormControl","onSubmit","FormLabel","htmlFor","Signup","setCurrentUser","passwordConfirmation","setPasswordConfirmation","password_confirmation","className","UnauthenticatedApp","exact","AppWindow","App","authChecked","setAuthChecked","credentials","store","configureStore","reducer","gridsReducer","shapeTypesReducer","universesReducer","userReducer","viewReducer","worldsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bf1170a.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n//maybe write fetches here\n\n// export const fetchCats = createAsyncThunk(\"cats/fetchCats\", () => {\n//     // return a Promise containing the data we want\n//     return fetch(\"https://learn-co-curriculum.github.io/cat-api/cats.json\")\n//       .then((response) => response.json())\n//       .then((data) => data.images);\n//   });\n\nconst initialState = {\n    current: {}, // user data\n    status: \"idle\", // loading state\n  };\n\nconst userSlice = createSlice({\n    name: \"user\",\n    initialState,\n    reducers: {\n      userUpdate(state, action) {\n        state.current = action.payload;\n      }\n    },\n      // async actions\n      extraReducers: {\n        // [fetchCats.pending](state) {\n        //   state.status = \"loading\";\n        // },\n        // [fetchCats.fulfilled](state, action) {\n        //   state.entities = action.payload;\n        //   state.status = \"idle\";\n        // }\n      }\n  });\n  \n  export const { userUpdate } = userSlice.actions;\n  \n  export default userSlice.reducer;","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { userUpdate } from '../features/auth/userSlice';\n\nexport default function Appbar({ toggleDrawer }) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const user = useSelector((state)=>state.user.current)\n  const dispatch = useDispatch()\n\n  const handleLogout = () => {\n        fetch(`api/logout`, {\n          method: 'DELETE'\n        })\n          .then(res => {\n            if (res.ok) {\n              dispatch(userUpdate({}));\n              window.location.reload();\n            }\n          })\n      }\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <FormGroup>\n        {/* <FormControlLabel\n          control={\n            <Switch\n              checked={auth}\n              onChange={handleChange}\n              aria-label=\"login switch\"\n            />\n          }\n          label={auth ? 'Logout' : 'Login'}\n        /> */}\n      </FormGroup>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            onClick={toggleDrawer(\"left\", true)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            SVG Fantasy Mapmaker\n          </Typography>\n          {user.id && (\n            <div>\n              <IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleLogout} style={{color: \"red\"}}>Logout</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}","import { getQuadrantRoute, targetPoint } from \"../viewport/positioning\";\n\nexport function changePath(viewportData,event,direction,tile) {\n    const { tile_width_units } = viewportData.tileSettings\n    // console.log(viewportData);\n    let point = targetPoint(viewportData,event,direction)\n    let route = getQuadrantRoute(point,tile_width_units);\n    // let pathArray = generatePathArray([],route,tile_width_units,true);\n    // console.log(route);\n    // console.log(pathArray);\n    // console.log(joinPath(pathArray,tile_width_units));\n    // console.log(joinPath(pathCopy,tile_width_units,[\"a\",\"b\",\"c\",\"d\",\"e\"]));\n    return route;\n}\n\n//joining the path involves iterating through and joining with a \"m distance distance\" at the end of each one that is an array. the distance is the tile_width/2**how-many-arrays-deep you are starting at 1\n\nexport function joinPath(pathArray,tileWidth,joinStrings=[\" \",\" \",\" \",\" \",\" \"]) {\n    let returnArray = JSON.parse(JSON.stringify(pathArray));\n    let joins = [...joinStrings];\n    function joinLevel(theArray,distance,separators,q=\"\") {\n        // debugger;\n        let pathStart = [\n            \"m 0 0\",\n            `m ${distance} 0`,\n            `m ${-distance} ${distance}`,\n            `m ${distance} 0`\n          ];\n        let pathEnd = `m ${-distance/2} ${-distance/2}`;\n        for (let i=0;i<4;i++) {\n            // debugger;\n            if (typeof theArray[i]!==\"string\") {\n                theArray[i] = joinLevel(theArray[i],distance/2,separators.slice(1),i)\n            }  \n        }\n        let output\n        if (typeof q!==\"number\") {\n            output = theArray.join(separators[0]);\n        } else {\n            output = `${pathStart[q]} ${theArray.join(separators[0])} ${pathEnd}`\n        }\n        // debugger;\n        return output;\n    }\n    let returnValue = joinLevel(returnArray,tileWidth,joins)\n    // debugger;\n    return returnValue;\n}\n\nexport function generatePathArray(originalArray,route,width,fill) {\n    let newArray = originalArray ? JSON.parse(JSON.stringify(originalArray)) : [];\n    if (newArray.length===0) {\n        newArray = splitPath(\"\",width)\n    }\n    function traversePathArray(array,adjRoute) {\n        let thisWidth = width/(2**(6-adjRoute.length))\n        if (adjRoute.length===1) {\n            array[adjRoute[0]] = genUnitPath(adjRoute[0],fill,thisWidth*2)\n        } else {\n            if (typeof array[adjRoute[0]]===\"string\") {\n                array[adjRoute[0]] = splitPath(array[adjRoute[0]],thisWidth)\n            }\n            traversePathArray(array[adjRoute[0]],adjRoute.slice(1))\n        }\n    }\n    traversePathArray(newArray,route);\n    return newArray;\n}\n\nexport function splitPath(path,width) {\n    const regex = new RegExp('h')\n    const fill = regex.test(path);\n    return [\n        genUnitPath(0,fill,width),\n        genUnitPath(1,fill,width),\n        genUnitPath(2,fill,width),\n        genUnitPath(3,fill,width)\n    ]\n}\n\nfunction genUnitPath(quadrant,fill=false,width) {\n    let distance = width/2\n    let pathM = [\n      \"m 0 0\",\n      `m ${distance} 0`,\n      `m ${-distance} ${distance}`,\n      `m ${distance} 0`\n    ]\n    let pathR=\"\"\n    if (fill) {\n        pathR=` h ${distance} v ${distance} h ${-distance} v ${-distance}`\n    }\n    return `${pathM[quadrant]}${pathR}`\n}\n\n//ex. path string \"Q1....Q2Q1...Q2Q2...Q2Q3...Q2Q4....Q3....Q4\"","export function getQuadrantRoute(targetXY,tileSize) {\n    let route = [];\n    let target = {...targetXY};\n    // console.log(target);\n    while (route.length<5) {\n        let compare = tileSize/(2**(route.length+1));\n        if (target.x>=compare) {\n            if (target.y>=compare) {\n                route.push(3);\n                target.y=target.y-compare;\n            } else {\n                route.push(1)\n            }\n            target.x=target.x-compare;\n        } else {\n            if (target.y>=compare) {\n                route.push(2);\n                target.y=target.y-compare;\n            } else {\n                route.push(0)\n            }\n        }\n    }\n    // console.log(tileSize/(2**(route.length+1)))\n    return route;\n}\n\n//given the tileFocus and client coordinates (and directional tile which we can get from the target shape clicked), targetPoint can return the targetXYcoordinates in units\n\nexport function targetPoint(viewportData,event,direction) {\n    const {tile_width_units} = viewportData.tileSettings;\n    let unitXY = clientXYtoUnitXY(viewportData,event)\n    let relativeXY = {};\n    if (direction===\"center\"||(direction===\"north\"||direction===\"south\")) {\n        relativeXY.x = unitXY.x\n    }\n    if (direction===\"center\"||(direction===\"east\"||direction===\"west\")) {\n        relativeXY.y = unitXY.y\n    }\n    if ((direction===\"north\"||direction===\"northeast\")||direction===\"northwest\") {\n        relativeXY.y = tile_width_units+unitXY.y;\n    }\n    if ((direction===\"south\"||direction===\"southeast\")||direction===\"southwest\") {\n        relativeXY.y = unitXY.y-tile_width_units;\n    }\n    if ((direction===\"east\"||direction===\"southeast\")||direction===\"northeast\") {\n        relativeXY.x = unitXY.x-tile_width_units;\n    }\n    if ((direction===\"west\"||direction===\"southwest\")||direction===\"northwest\") {\n        relativeXY.x = tile_width_units+unitXY.x;\n    }\n    return relativeXY;\n}\n\nfunction clientXYtoUnitXY(viewportData,event) {\n    const {tileFocus,dimensions,tileSettings,viewPortWidth} = viewportData\n    return {\n        x: tileFocus.x-(((dimensions.width/2)-event.clientX)*2*tileSettings.tile_width_units/viewPortWidth),\n        y: tileFocus.y-(((dimensions.height/2)-event.clientY)*2*tileSettings.tile_width_units/viewPortWidth)\n    }\n}","import { useSelector } from 'react-redux';\nimport { joinPath } from '../shapes/pathFunctions';\n\n\nfunction Tile({ direction, tile, centerImageMCoord, handleMouseDown, handleMouseUp, handleMouseMove}) {\n    const tileSettings = useSelector(state=>state.grids.primary.settings)\n    const coordinateOffsets = {\n        northeast: {\n            x: -tileSettings.tile_width_units,\n            y: -tileSettings.tile_width_units\n        },\n        north: {\n            x: 0,\n            y: -tileSettings.tile_width_units\n        },\n        northwest: {\n            x: tileSettings.tile_width_units,\n            y: -tileSettings.tile_width_units\n        },\n        west: {\n            x: -tileSettings.tile_width_units,\n            y: 0\n        },\n        center: {\n            x: 0,\n            y: 0\n        },\n        east: {\n            x: tileSettings.tile_width_units,\n            y: 0\n        },\n        southwest: {\n            x: -tileSettings.tile_width_units,\n            y: tileSettings.tile_width_units\n        },\n        south: {\n            x: 0,\n            y: tileSettings.tile_width_units\n        },\n        southeast: {\n            x: tileSettings.tile_width_units,\n            y: tileSettings.tile_width_units\n        }\n    }\n    const shapeTypes = useSelector(state => state.shapeTypes.entities)\n\n    if (!tile) {\n        return null\n    }\n\n    function parsePath(shape) {\n        let shapePath;\n        if (shape.path_array) {\n            shapePath = joinPath(shape.path_array,tileSettings.tile_width_units)\n        } else {\n            shapePath = `${shape.path_zero} ${shape.path_one} ${shape.path_two} ${shape.path_three}`\n        }\n        return `M ${centerImageMCoord.x+coordinateOffsets[direction].x} ${centerImageMCoord.y+coordinateOffsets[direction].y} ${shapePath}`\n    }\n\n    function getColor(shape) {\n        return shapeTypes.find(shapeClass=>shapeClass.id===shape.shape_class).shape_types.find(type=>type.id===shape.shape_type).color\n    }\n\n    return (\n        <g>\n            {tile.shapes.map(shape=><path\n                key={shape.id ? shape.id : shape.feature.title} \n                d={parsePath(shape)}\n                fill={getColor(shape)}\n                onMouseDown={handleMouseDown}\n                onMouseUp={handleMouseUp}\n                onMouseMove={handleMouseMove}\n            />)}\n        </g>\n    )\n}\n\nexport default Tile;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    current: {},\n    tileFocus: {},\n    userFocus: {},\n    status: \"idle\", // loading state\n  };\n\nconst viewSlice = createSlice({\n    name: \"view\",\n    initialState,\n    reducers: {\n      changeView(state, action) {\n        // using createSlice lets us mutate state!\n        state.current = action.payload;\n      },\n      changeFocus(state, action) {\n        // using createSlice lets us mutate state!\n        state.tileFocus = action.payload;\n      },\n      changeUserFocus(state, action) {\n        // using createSlice lets us mutate state!\n        state.userFocus = action.payload;\n      }\n    },\n      // async actions\n      extraReducers: {\n      }\n  });\n\n  export const { changeView, changeFocus, changeUserFocus } = viewSlice.actions;\n\n  export default viewSlice.reducer\n\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Tile from \"./Tile\";\n\nexport const fetchGrids = createAsyncThunk(\"grids/fetchGrids\", (id) => {\n    // return a Promise containing the data we want\n    return fetch(`api/grids/${id}`)\n      .then((response) => response.json())\n      .then((data) => data);\n  });\n\nexport const postMapEdits = createAsyncThunk(\"grids/postMapEdits\", (pendingChanges) => {\n  // return a Promise containing the data we want\n  return fetch(`api/mapedits`,{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(pendingChanges)\n  })\n    .then((response) => response.json())\n    .then((data) => data);\n});\n\nconst initialState = {\n    primary: {}, // array of worlds belonging to the user\n    editingMode: {\n      mode: null,\n      featureTitle: null\n    },\n    pendingChanges: {add: [],edit: []},\n    status: \"idle\", // loading state\n};\n\nconst gridsSlice = createSlice({\n    name: \"grids\",\n    initialState,\n    reducers: {\n      changeEditingMode(state,action) {\n        state.editingMode = action.payload;\n      },\n      addPendingChange(state,action) {\n        let exists = state.pendingChanges.find(change=>change.tileId===action.payload.tileId&&change.featureTitle===action.payload.featureTitle)\n        if (!exists) {state.pendingChanges.push(action.payload)};\n      },\n      //{direction: \"center\",shape: {}}\n      addShape(state,action) {\n        state.primary.tiles[action.payload.direction].shapes.push(action.payload.shape);\n        state.pendingChanges.add.push(action.payload.shape);\n      },\n      //{direction: \"center\",shape: {}}\n      changeShapeArray(state,action) {\n        let tile = state.primary.tiles[action.payload.direction];\n        state.primary.tiles[action.payload.direction].shapes.find(shape=>shape.feature.title===action.payload.feature).path_array = action.payload.path_array\n        let newShapeToChange = state.pendingChanges.add.find(shape=>shape.tile_id===tile.id&&shape.feature.title===action.payload.feature);\n        if (newShapeToChange) {\n          newShapeToChange.path_array = action.payload.path_array;\n        } else {\n          let existingShapeToChange = state.pendingChanges.edit.find(shape=>shape.tile_id===tile.id&&shape.feature.title===action.payload.feature);\n          if (existingShapeToChange) {\n            existingShapeToChange.path_array = action.payload.path_array;\n          } else {\n            let shapeToAddToEdits = JSON.parse(JSON.stringify(tile.shapes.find(shape=>shape.feature.title===action.payload.feature)));\n            shapeToAddToEdits.path_array = action.payload.path_array;\n            state.pendingChanges.edit.push(shapeToAddToEdits);\n          }\n        }\n      }\n    },\n      // async actions\n      extraReducers: {\n        [fetchGrids.pending](state) {\n          state.status = \"loading\";\n        },\n        [fetchGrids.fulfilled](state, action) {\n          state.primary = action.payload;\n          state.status = \"idle\";\n        },\n        [postMapEdits.pending](state) {\n          state.status = \"loading\";\n        },\n        [postMapEdits.fulfilled](state, action) {\n          state.status = \"idle\";\n        }\n      }\n  });\n\n  export const { changeEditingMode, addPendingChange, addShape, changeShapeArray } = gridsSlice.actions\n\n  export default gridsSlice.reducer;","import styled from 'styled-components';\nimport { useState, useEffect } from 'react';\nimport Tile from '../tiles/Tile';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeView, changeFocus, changeUserFocus } from './viewSlice';\nimport { addShape, changeShapeArray, fetchGrids } from '../tiles/gridsSlice';\nimport { changePath, generatePathArray } from '../shapes/pathFunctions';\n\nconst viewPortWidth = 2000 //in pixels, height is half of this\n\nfunction Viewport() {\n  const dispatch = useDispatch()\n  const [dimensions, setDimensions] = useState({ //the dimensions of the user's window\n    height: Math.min(window.innerHeight,viewPortWidth/2),\n    width: Math.min(window.innerWidth,viewPortWidth)\n  })\n  const [dragPoint,setDragPoint] = useState({});\n  const tileSettings = useSelector(state=>state.grids.primary.settings)\n  const tiles = useSelector(state=>state.grids.primary.tiles)\n  const currentView = useSelector(state=>state.view.current)\n  const tileFocus = useSelector(state => state.view.tileFocus)\n  const userFocus = useSelector(state => state.view.userFocus)\n  const editingMode = useSelector(state=>state.grids.editingMode)\n  const features = useSelector(state=>state.worlds.currentWorld.features)\n  \n  const windowCenterUnit = tileSettings ? { //the x,y coordinates in units that are at the center of the users window\n    x: dimensions.width*tileSettings.tile_width_units/viewPortWidth,\n    y: dimensions.height*tileSettings.tile_width_units/viewPortWidth\n  } : null\n\n  const centerImageMCoord = tileSettings ? {\n      x: windowCenterUnit.x - userFocus.x,\n      y: windowCenterUnit.y - userFocus.y\n  } : null\n\nconst centerImageEdgeDistancesUnits = tileSettings ? {\n  s: -tileSettings.tile_width_units+currentView.focus_y,\n  n: currentView.focus_y,\n  e: -tileSettings.tile_width_units+currentView.focus_x,\n  w: currentView.focus_x,\n} : null\n\n  const tileIds = {\n    northwest: 1,\n    north: 2,\n    northeast: 3,\n    west: 4,\n    center: 5,\n    east: 6,\n    southwest: 7,\n    south: 8,\n    southeast: 9\n  }\n\n  function debounce(fn, ms) { //a function for clearing and applying a timer- used to reset the variable in state for the window size\n    let timer\n    return () => {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        timer = null\n        fn.apply(this, arguments)\n      }, ms)\n    };\n  }\n\n  useEffect(() => { //the function for resetting the (window) dimensions variable in state, used in Effect to support a cleanup function\n    const debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: Math.min(window.innerHeight,viewPortWidth/2),\n        width: Math.min(window.innerWidth,viewPortWidth)\n      })\n    }, 250)\n\n    window.addEventListener('resize', debouncedHandleResize)\n\n    return () => {\n      window.removeEventListener('resize', debouncedHandleResize)   \n    }\n  })\n\n  function manageReload() {\n    let displacement = {\n      x: currentView.focus_x-userFocus.x,\n      y: currentView.focus_y-userFocus.y\n    }\n    let newTile;\n    let newCoordinates = {};\n    if (displacement.y>centerImageEdgeDistancesUnits.n) {\n      newCoordinates.y = tileSettings.tile_width_units-(displacement.y-currentView.focus_y)\n      if (displacement.x>centerImageEdgeDistancesUnits.w) {\n        newTile = \"northwest\"\n        newCoordinates.x = tileSettings.tile_width_units-(displacement.x-currentView.focus_x)\n      }\n      else if (displacement.x<centerImageEdgeDistancesUnits.e) {\n        newTile = \"northeast\"\n        newCoordinates.x = (displacement.x*-1)-(tileSettings.tile_width_units-currentView.focus_x)\n      } else {\n        newTile = \"north\"\n        newCoordinates.x = currentView.focus_x-displacement.x\n      }\n    } else if (displacement.y<centerImageEdgeDistancesUnits.s) {\n      newCoordinates.y = (displacement.y*-1)-(tileSettings.tile_width_units-currentView.focus_y)\n      if (displacement.x>centerImageEdgeDistancesUnits.w) {\n        newTile = \"southwest\"\n        newCoordinates.x = tileSettings.tile_width_units-(displacement.x-currentView.focus_x)\n      }\n      else if (displacement.x<centerImageEdgeDistancesUnits.e) {\n        newTile = \"southeast\"\n        newCoordinates.x = (displacement.x*-1)-(tileSettings.tile_width_units-currentView.focus_x)\n      } else {\n        newTile = \"south\"\n        newCoordinates.x = currentView.focus_x-displacement.x\n      }\n    } else if (displacement.x>centerImageEdgeDistancesUnits.w) {\n      newTile = \"west\"\n      newCoordinates.x = tileSettings.tile_width_units-(displacement.x-currentView.focus_x)\n      newCoordinates.y = currentView.focus_y-displacement.y\n    }\n    else if (displacement.x<centerImageEdgeDistancesUnits.e) {\n      newTile = \"east\"\n      newCoordinates.x = (displacement.x*-1)-(tileSettings.tile_width_units-currentView.focus_x)\n      newCoordinates.y = currentView.focus_y-displacement.y\n    }\n    if (newTile) {\n      let tile_to_get = tiles[newTile].id\n      dispatch(fetchGrids(tile_to_get))\n      .then(()=>{\n        dispatch(changeView({\n          focus_x: newCoordinates.x,\n          focus_y: newCoordinates.y\n        }));\n        dispatch(changeFocus({\n            x: newCoordinates.x,\n            y: newCoordinates.y\n        }));\n        dispatch(changeUserFocus({\n            x: newCoordinates.x,\n            y: newCoordinates.y\n        }))\n      })\n    }\n  }\n\n  const viewportData = {\n    dragPoint: dragPoint,\n    tileSettings: tileSettings,\n    tiles: tiles,\n    currentView: currentView,\n    tileFocus: tileFocus,\n    userFocus: userFocus,\n    windowCenterUnit: windowCenterUnit,\n    centerImageMCoord: centerImageMCoord,\n    centerImageEdgeDistancesUnits: centerImageEdgeDistancesUnits,\n    viewPortWidth: viewPortWidth,\n    dimensions: dimensions\n}\n\n  function checkMaxHeight(newFocus) {\n    let extraTileNorth = tiles.north ? tileSettings.tile_width_units : 0;\n    let extraTileSouth = tiles.south ? tileSettings.tile_width_units : 0;\n    let adjustedFocus = {\n      x: newFocus.x,\n      y: newFocus.y\n    }\n    if ((windowCenterUnit.y-newFocus.y)>0+extraTileNorth) {\n      adjustedFocus.y=windowCenterUnit.y-extraTileNorth\n    }\n    if ((windowCenterUnit.y-newFocus.y)<((windowCenterUnit.y*2)-tileSettings.tile_width_units-extraTileSouth)) {\n      adjustedFocus.y=tileSettings.tile_width_units-(windowCenterUnit.y)+extraTileSouth;\n    }\n    return adjustedFocus;\n  }\n\n  function handleMouseDown(e) {\n    setDragPoint({\n      x: e.clientX,\n      y: e.clientY\n    })\n  }\n\n  function handleMouseMove(e) {\n    if(dragPoint.x&&!editingMode.mode) {\n      let initialFocus = tileFocus;\n      let newFocus = {\n          x: initialFocus.x+((dragPoint.x-e.clientX)*2*tileSettings.tile_width_units/viewPortWidth),\n          y: initialFocus.y+((dragPoint.y-e.clientY)*2*tileSettings.tile_width_units/viewPortWidth)\n      }\n      let adjustedFocus = checkMaxHeight(newFocus);\n      // let adjustedFocus = newFocus;\n      dispatch(changeUserFocus(adjustedFocus))\n    }\n  }\n\n  function handleMouseUp(e,direction) { \n    setDragPoint({})\n    if(tileFocus.x===userFocus.x&&tileFocus.y===userFocus.y) {\n      if(editingMode.mode) {\n        let feature = features.find(feature=>feature.title===editingMode.featureTitle)\n        let route = changePath(viewportData,e,direction,tiles[direction]);\n        let shape = tiles[direction].shapes.find(shape=>shape.feature.title===editingMode.featureTitle)\n        let fill = editingMode.mode===\"draw\";\n        if(!shape) {\n          dispatch(addShape({direction: direction,shape: {\n            tile_id: tiles[direction].id,\n            shape_class: feature.shape_class_id,\n            shape_type: feature.shape_type_id,\n            feature: feature,\n            path_array: generatePathArray([],route,tileSettings.tile_width_units,fill) \n          }}));\n        } else {\n          dispatch(changeShapeArray({\n            direction: direction,\n            feature: editingMode.featureTitle,\n            path_array: generatePathArray(shape.path_array,route,tileSettings.tile_width_units,fill)\n          }))\n        }\n      }\n    } else {\n      dispatch(changeFocus(userFocus));\n      manageReload()\n    }\n  }\n\nif (!tileSettings){\n  return null\n}\n\nreturn (\n    <SVGCanvas viewBox={`0 0 ${tileSettings.tile_width_units*2} ${tileSettings.tile_width_units}`} xmlns=\"http://www.w3.org/2000/svg\">\n        {tiles&&Object.keys(tiles).map((direction)=><Tile \n            key={tileIds[direction]}\n            direction={direction}\n            tile = {tiles[direction]}\n            centerImageMCoord={centerImageMCoord}\n            handleMouseDown={handleMouseDown}\n            handleMouseUp={e=>{handleMouseUp(e,direction)}}\n            handleMouseMove={handleMouseMove}\n        />)}\n    </SVGCanvas>\n)\n}\n\nconst SVGCanvas = styled.svg`\n  width: ${viewPortWidth}px;\n  height: ${viewPortWidth/2}px;\n  position: fixed;\n  background: black;\n`\nexport default Viewport;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchUniverses = createAsyncThunk(\"universes/fetchUniverses\", () => {\n    // return a Promise containing the data we want\n    return fetch(\"/api/universes\")\n      .then((response) => response.json())\n      .then((data) => data);\n  });\n\nexport const postUniverse = createAsyncThunk(\"universes/postUniverse\", (postConfig) => {\n  // return a Promise containing the data we want\n  return fetch(\"/api/universes\",{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(postConfig)\n  })\n    .then((response) => response.json())\n    .then((data) => data);\n});\n\nconst initialState = {\n    entities: [], // array of universes belonging to the user\n    status: \"idle\", // loading state\n  };\n\nconst universesSlice = createSlice({\n    name: \"universes\",\n    initialState,\n    reducers: {\n      universeAdded(state, action) {\n        // using createSlice lets us mutate state!\n        state.entities.push(action.payload);\n      },\n      universeUpdated(state, action) {\n        //configure changes like this {id: 1,changes: {key1:value1, key2:value2...}}\n        const universe = state.entities.find((universe) => universe.id === action.payload.id);\n        let fields = Object.keys(action.payload.changes)\n        fields.forEach(field => {\n            universe[field] = action.payload.change[field];\n        });\n      }\n    },\n      // async actions\n      extraReducers: {\n        [fetchUniverses.pending](state) {\n          state.status = \"loading\";\n        },\n        [fetchUniverses.fulfilled](state, action) {\n          state.entities = action.payload;\n          state.status = \"idle\";\n        },\n        [postUniverse.pending](state) {\n          state.status = \"loading\";\n        },\n        [postUniverse.fulfilled](state, action) {\n          state.entities.push(action.payload);\n          state.status = \"idle\";\n        }\n      }\n  });\n  \n  export const { universeAdded, universeUpdated } = universesSlice.actions;\n  \n  export default universesSlice.reducer;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchWorlds = createAsyncThunk(\"worlds/fetchWorlds\", (id) => {\n    // return a Promise containing the data we want\n    return fetch(`/api/worlds/${id}`)\n      .then((response) => response.json())\n      .then((data) => data);\n  });\n\n  export const postWorld = createAsyncThunk(\"worlds/postWorld\", (postConfig) => {\n    // return a Promise containing the data we want\n    return fetch(\"/api/worlds\",{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postConfig)\n    })\n      .then((response) => response.json())\n      .then((data) => data);\n  });\n\nconst initialState = {\n    entities: [], // array of worlds belonging to the user\n    currentWorld: {},\n    status: \"idle\", // loading state\n  };\n\nconst worldsSlice = createSlice({\n    name: \"worlds\",\n    initialState,\n    reducers: {\n      worldAdded(state, action) {\n        // using createSlice lets us mutate state!\n        state.entities.push(action.payload);\n      },\n      worldUpdated(state, action) {\n        //configure changes like this {id: 1,changes: {key1:value1, key2:value2...}}\n        const world = state.currentWorld;\n        // let fields = Object.keys(action.payload.changes)\n        // fields.forEach(field => {\n        //     world[field] = action.payload.change[field];\n        // });\n        console.log(world);\n      },\n      addFeatureToWorld(state,action) {\n        state.currentWorld.features.push(action.payload)\n      }\n    },\n      // async actions\n      extraReducers: {\n        [fetchWorlds.pending](state) {\n          state.status = \"loading\";\n        },\n        [fetchWorlds.fulfilled](state, action) {\n          state.currentWorld = action.payload;\n          state.status = \"idle\";\n        },\n        [postWorld.pending](state) {\n          state.status = \"loading\";\n        },\n        [postWorld.fulfilled](state, action) {\n          state.currentWorld = action.payload;\n          state.status = \"idle\";\n        }\n      }\n  });\n  \n  export const { worldAdded, worldUpdated, addFeatureToWorld } = worldsSlice.actions;\n  \n  export default worldsSlice.reducer;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchShapeTypes = createAsyncThunk(\"shapeTypes/fetchshapeTypes\", () => {\n    // return a Promise containing the data we want\n    return fetch(\"/api/shape_classes\")\n      .then((response) => response.json())\n      .then((data) => data);\n  });\n\nconst initialState = {\n    entities: [], //\n    status: \"idle\", // loading state\n  };\n\nconst shapeTypesSlice = createSlice({\n    name: \"shapeTypes\",\n    initialState,\n    reducers: {\n      shapeClassToggle(state,action) {\n        const shapeClass = state.entities.find(shapeClass=>shapeClass.id===action.payload)\n        shapeClass.open = !shapeClass.open\n      },\n      shapeTypeToggle(state,action) {\n        //configure changes like this {id: 1,shape_class: 1}\n        const shapeClass = state.entities.find(shapeClass=>shapeClass.id===action.payload.shape_class)\n        const shapeType = shapeClass.shape_types.find(type=>type.id===action.payload.id)\n        shapeType.open = !shapeType.open\n      },\n    },\n      // async actions\n      extraReducers: {\n        [fetchShapeTypes.pending](state) {\n          state.status = \"loading\";\n        },\n        [fetchShapeTypes.fulfilled](state, action) {\n          state.entities = action.payload;\n          state.entities.forEach(shapeClass=>{\n            shapeClass.open = false;\n            shapeClass.shape_types.forEach(type=>type.open=false)\n          })\n          state.status = \"idle\";\n        }\n      }\n  });\n\n  export const { shapeClassToggle, shapeTypeToggle } = shapeTypesSlice.actions;\n  \n  export default shapeTypesSlice.reducer;","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport List from '@mui/material/List';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport AllInclusiveIcon from '@mui/icons-material/AllInclusive';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport { useSelector } from 'react-redux';\nimport PublicIcon from '@mui/icons-material/Public';\nimport { useHistory } from 'react-router';\n\nexport default function TemporaryDrawer({ toggleDrawer, sidebarState, setUniverseDialogueOpen, loadWorld }) {\n    const universes = useSelector(state=>state.universes.entities)\n    const history = useHistory()\n\n\n  const list = (anchor) => (\n    <Box\n      sx={{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 250 }}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        {/* {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))} */}\n      </List>\n      {universes.map(universe=>{\n          return ( <>\n          <List key={universe.id}>\n              <ListItem button \n                onClick={()=>history.push(`/universes/${universe.id}`)}\n              >\n                <ListItemIcon >\n                    <AllInclusiveIcon />\n                </ListItemIcon>\n                <ListItemText primary={universe.title} />\n              </ListItem>\n              {universe.worlds.map(world=>(\n                <ListItem button \n                    key={world.id}\n                    sx={{ pl: 4 }}\n                    onClick={()=>{\n                      loadWorld(world.id);\n                      history.push(`/viewer`);\n                    }}\n                >\n                  <ListItemIcon >\n                      <PublicIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={world.title} />\n                </ListItem>\n              ))}\n          </List>\n          <Divider key={`divider${universe.id}`}/>\n          </>\n      )\n      })      \n      }\n      <List>\n        {/* {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))} */}\n        <ListItem button onClick={()=>setUniverseDialogueOpen(true)}>\n            <ListItemIcon>\n              <AddCircleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"New Universe\" />\n        </ListItem>\n      </List>\n    </Box>\n  );\n\n  return (\n    <div>\n      {['left', 'right', 'top', 'bottom'].map((anchor) => (\n        <React.Fragment key={anchor}>\n          {/* <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button> */}\n          <Drawer\n            anchor={anchor}\n            open={sidebarState[anchor]}\n            onClose={toggleDrawer(anchor, false)}\n          >\n            {list(anchor)}\n          </Drawer>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}","import * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { useHistory } from 'react-router';\n\nexport default function WorldCard({ world, loadWorld }) {\n    const history = useHistory()\n\n  return (\n    <Card sx={{ maxWidth: 345 }} raised={true}>\n      <CardMedia\n        component=\"img\"\n        height=\"140\"\n        image=\"https://cdn.pixabay.com/photo/2016/10/20/18/35/earth-1756274_960_720.jpg\"\n        alt=\"earth\"\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\n          {world.title}\n        </Typography>\n        {/* <Typography variant=\"body2\" color=\"text.secondary\">\n          Description\n        </Typography> */}\n      </CardContent>\n      <CardActions>\n        <Button \n            size=\"small\"\n            onClick={()=>{\n              loadWorld(world.id);\n              history.push(\"/viewer\")}}\n        >\n            View\n        </Button>\n        {/* <Button size=\"small\">Edit Details</Button> */}\n      </CardActions>\n    </Card>\n  );\n}\n","import * as React from 'react';\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch } from 'react-redux';\nimport { postUniverse } from '../features/universes/universesSlice';\nimport { postWorld } from '../features/worlds/worldsSlice';\nimport { useHistory } from 'react-router';\n\nexport default function FormDialog({ formDialogueOpen, setFormDialogueOpen, formDialogueObject }) {\n    const { item, field, postConfig, action } = formDialogueObject\n    const dispatch = useDispatch();\n    const history = useHistory();\n  \n    const [formData,setFormData] = useState(postConfig)\n\n  const handleClose = () => {\n    setFormDialogueOpen(false);\n  };\n\n  const handleChange = e => {\n    let newData = JSON.parse(JSON.stringify(formData));\n    newData[e.target.name] = e.target.value;\n    setFormData(newData);\n  }\n\n  const handleSubmit = () => {\n    if (action===\"postUniverse\") {\n      dispatch(postUniverse(formData))\n    .then(()=>{\n      setFormDialogueOpen(false);\n      window.location.reload();\n    });\n    }\n    if (action===\"postWorld\") {\n      dispatch(postWorld(formData))\n      .then(()=>{\n        setFormDialogueOpen(false);\n        window.location.reload()\n        // history.push(\"/viewer\");\n      });\n    }\n  }\n\n  return (\n    <div>\n      {/* <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Open form dialog\n      </Button> */}\n      <Dialog open={formDialogueOpen} onClose={handleClose}>\n        <DialogTitle>{`New ${item[0].toUpperCase()+item.slice(1)}`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {`Enter a name for your new ${item}.`}\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label={`${item[0].toUpperCase()+item.slice(1)} Name`}\n            type=\"email\"\n            fullWidth\n            variant=\"standard\"\n            onChange={handleChange}\n            name={field}\n            value={formData[field]}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleSubmit}>Create</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport styled from 'styled-components';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport WorldCard from \"../features/worlds/WorldCard\";\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport FormDialog from \"./FormDialog\";\nimport { useState } from \"react\";\n\nexport default function UniversePage ({ loadWorld }) {\n    const { id } = useParams();\n    const universes = useSelector(state=>state.universes.entities)\n    const universe = universes.find(universe=>universe.id===parseInt(id))\n\n    const [formDialogueOpen, setFormDialogueOpen] = useState(false);\n\n    const handleFormOpen = () => {\n        setFormDialogueOpen(true);\n    };\n\n    if (!universe) {\n        return (\n            <DisplayBox>\n                {`Universe ${id} not found.`}\n            </DisplayBox>\n        )\n    }\n\n    return (\n        <DisplayBox>\n            <Accordion>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>{universe.title}</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List>\n                        <ListItem button onClick={handleFormOpen}>\n                            <ListItemIcon>\n                                <AddIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"New World\" />\n                        </ListItem>\n                    </List>\n                    <Typography>\n                        {/* A Description could go here */}\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n            <CardArea>\n                {universe.worlds.map(world=>(\n                    <WorldCard \n                        key={world.id}\n                        world={world}\n                        loadWorld={loadWorld}\n                    />\n                ))}\n            </CardArea>\n            \n            Images courtesy of Pixabey\n            <FormDialog \n                formDialogueOpen={formDialogueOpen}\n                setFormDialogueOpen={setFormDialogueOpen}\n                formDialogueObject={{\n                    item: \"world\",\n                    field: \"title\",\n                    postConfig: {\n                        title: \"\",\n                        universe_id: universe.id,\n                        max_zoom_level: 21\n                    },\n                    action: \"postWorld\"\n                }}\n            />\n        </DisplayBox>\n    )\n}\n\nconst DisplayBox = styled.div`\n    display: flex;\n    width: auto;\n    padding: 120px;\n    flex-direction: column;\n    align-items: stretch;\n`\n\nconst CardArea = styled.div`\n    display: flex;\n    padding-top: 30px;\n    padding-bottom: 30px;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-items: flex-start;\n`","import * as React from 'react';\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { addFeatureToWorld } from '../worlds/worldsSlice';\n\nexport default function NewFeatureDialogue({ formDialogueOpen, setFormDialogueOpen, featureStarterData, setFeatureStarterData }) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n  const handleClose = () => {\n    setFormDialogueOpen(false);\n  };\n\n  const handleChange = e => {\n    let newData = JSON.parse(JSON.stringify(featureStarterData));\n    newData[e.target.name] = e.target.value;\n    setFeatureStarterData(newData);\n  }\n\n  const handleSubmit = () => {\n        fetch(\"api/features\",{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(featureStarterData)\n          })\n            .then((response) => response.json())\n            .then((data) => {\n                dispatch(addFeatureToWorld(data));\n                setFormDialogueOpen(false);\n            });\n  }\n\n  return (\n    <div>\n      {/* <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Open form dialog\n      </Button> */}\n      <Dialog open={formDialogueOpen} onClose={handleClose}>\n        <DialogTitle>{\"New Feature\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {`Enter a name for your new feature.`}\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label={`Feature Name`}\n            type=\"text\"\n            fullWidth\n            variant=\"standard\"\n            onChange={handleChange}\n            name=\"title\"\n            value={featureStarterData.title}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleSubmit}>Create</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Collapse from '@mui/material/Collapse';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport { useDispatch, useSelector } from 'react-redux';\nimport LandscapeIcon from '@mui/icons-material/Landscape';\nimport AccountBalanceIcon from '@mui/icons-material/AccountBalance';\nimport LanguageIcon from '@mui/icons-material/Language';\nimport { shapeClassToggle, shapeTypeToggle } from './shapeTypesSlice';\nimport WaterIcon from '@mui/icons-material/Water';\nimport GrassIcon from '@mui/icons-material/Grass';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport EditOffIcon from '@mui/icons-material/EditOff';\nimport NewFeatureDialogue from './NewFeatureDialogue';\nimport { useState } from 'react';\nimport { changeEditingMode, postMapEdits } from '../tiles/gridsSlice';\nimport { Button } from '@mui/material';\nimport NatureIcon from '@mui/icons-material/Nature';\n\nexport default function FeaturesList() {\n    const shapeTypes = useSelector(state=>state.shapeTypes.entities)\n    const world = useSelector(state=>state.worlds.currentWorld)\n    const features = useSelector(state=>state.worlds.currentWorld.features)\n    const editingMode = useSelector(state=>state.grids.editingMode)\n    const pendingChanges = useSelector(state=>state.grids.pendingChanges)\n    const dispatch = useDispatch();\n    const [formDialogueOpen, setFormDialogueOpen] = useState(false);\n    const [featureStarterData,setFeatureStarterData] = useState({})\n\n    const openNewFeatureDialogue = (shapeClassId,shapeTypeId) => {\n        let starterData = {\n            shape_class_id: shapeClassId,\n            shape_type_id: shapeTypeId,\n            world_id: world.id,\n            title: \"\",\n            color: \"\"\n        }\n        setFeatureStarterData(starterData);\n        setFormDialogueOpen(true);\n    };\n\n  function ClassIcon({ classTitle }) {\n      if (classTitle === \"Geographical\"||classTitle===\"Mountain\") {\n          return (\n            <ListItemIcon key={classTitle}>\n                <LandscapeIcon style={{color: \"purple\"}}/>\n            </ListItemIcon>\n            )\n      }\n      else if (classTitle === \"Political\") {\n        return (\n          <ListItemIcon key={classTitle}>\n              <AccountBalanceIcon style={{color: \"red\"}}/>\n          </ListItemIcon>\n          )\n    } else if (classTitle === \"Sea\") {\n        return (\n          <ListItemIcon key={classTitle}>\n              <WaterIcon style={{color: \"blue\"}}/>\n          </ListItemIcon>\n          )\n    } else if (classTitle === \"Land\") {\n        return (\n          <ListItemIcon key={classTitle}>\n              <GrassIcon style={{color: \"green\"}}/>\n          </ListItemIcon>\n          )\n    } else if (classTitle === \"Forest\") {\n        return (\n          <ListItemIcon key={classTitle}>\n              <NatureIcon style={{color: \"darkgreen\"}}/>\n          </ListItemIcon>\n          )\n    } else {\n        return (\n          <ListItemIcon key={classTitle}>\n              <LanguageIcon style={{color: \"yellow\"}}/>\n          </ListItemIcon>\n          )\n    } \n  }\n\n  return ( <>\n    <List\n      sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n          Features\n        </ListSubheader>\n      }\n    >\n        {shapeTypes.map(shapeClass=>{\n            return (<>\n                <ListItemButton key={shapeClass.id} onClick={()=>dispatch(shapeClassToggle(shapeClass.id))}>\n                    <ClassIcon classTitle={shapeClass.title}/>\n                    <ListItemText primary={shapeClass.title} />\n                    {shapeClass.open ? <ExpandLess /> : <ExpandMore />}\n                </ListItemButton>\n                <Collapse key={`${shapeClass.id}collapse`} in={shapeClass.open} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                        {shapeClass.shape_types.map(shapeType=>{\n                            return (<>\n                                <ListItem key={shapeType.id}>\n                                    <ListItemButton sx={{ pl: 4 }} onClick={()=>dispatch(shapeTypeToggle({shape_class: shapeClass.id,id: shapeType.id}))}>\n                                        <ClassIcon classTitle={shapeType.title} />\n                                        <ListItemText primary={shapeType.title} />\n                                        {shapeType.open ? <ExpandLess /> : <ExpandMore />}\n                                    </ListItemButton>\n                                    <Tooltip title=\"Add\">\n                                        <IconButton onClick={()=>openNewFeatureDialogue(shapeClass.id,shapeType.id)}>\n                                            <AddIcon />\n                                        </IconButton>\n                                    </Tooltip>\n                                </ListItem>\n                                <Collapse key={`${shapeType.id}collapse`} in={shapeType.open} timeout=\"auto\" unmountOnExit>\n                                    <List component=\"div\" disablePadding>\n                                        {!features ? null : features.filter(feature=>feature.shape_class_id===shapeClass.id&&feature.shape_type_id===shapeType.id).map(feature=>{\n                                            return (\n                                                <ListItem key={feature.id}>\n                                                    <ListItemButton sx={{ pl: 8 }}>\n                                                        <ListItemText primary={feature.title} />\n                                                    </ListItemButton>\n                                                    <Tooltip title=\"Add To\">\n                                                        <IconButton\n                                                            onClick={()=>dispatch(changeEditingMode({\n                                                                mode: \"draw\",\n                                                                featureTitle: feature.title\n                                                            }))}\n                                                        >\n                                                            <EditIcon />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                    <Tooltip title=\"Remove From\">\n                                                        <IconButton\n                                                            onClick={()=>dispatch(changeEditingMode({\n                                                                mode: \"erase\",\n                                                                featureTitle: feature.title\n                                                            }))}\n                                                        >\n                                                            <EditOffIcon />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                </ListItem>\n                                            )\n                                        })}\n                                    </List>\n                                </Collapse>\n                                </>\n                            )\n                        })}\n                    </List>\n                </Collapse>\n                </>\n            )\n        })}\n        {editingMode.mode ? <Button variant=\"contained\" onClick={()=>{\n            dispatch(changeEditingMode({\n                mode: null,\n                featureTitle: null\n            }));\n            dispatch(postMapEdits(pendingChanges));\n        }}>Save Changes</Button> : null}\n    </List>\n    <NewFeatureDialogue \n        formDialogueOpen={formDialogueOpen}\n        setFormDialogueOpen={setFormDialogueOpen}\n        featureStarterData={featureStarterData}\n        setFeatureStarterData={setFeatureStarterData}\n    />\n    </>\n  );\n}\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport FeaturesList from '../features/shapes/FeaturesList';\n\nexport default function InfoBar() {\n  return (\n      <Paper \n        elevation={3}\n        sx={{\n            display: 'flex',\n            width: '300px',\n            marginTop: '90px',\n            marginLeft: '20px',\n            minHeight: '100px',\n            position: 'fixed'\n        }}\n      >\n        <FeaturesList />\n      </Paper>\n  );\n}\n","import Appbar from './Appbar';\nimport Viewport from '../features/viewport/Viewport';\nimport { Switch, Route, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchUniverses } from '../features/universes/universesSlice';\nimport { useState, useEffect } from 'react';\nimport { fetchWorlds } from '../features/worlds/worldsSlice';\nimport { fetchGrids } from '../features/tiles/gridsSlice'\nimport { changeFocus, changeUserFocus, changeView } from '../features/viewport/viewSlice';\nimport { fetchShapeTypes } from '../features/shapes/shapeTypesSlice';\nimport Sidebar from './Sidebar'\nimport * as React from 'react';\nimport UniversePage from './UniversePage';\nimport FormDialog from './FormDialog';\nimport InfoBar from './InfoBar';\n\nfunction AuthenticatedApp() {\n    const [sidebarState, setSidebarState] = React.useState({\n        top: false,\n        left: false,\n        bottom: false,\n        right: false,\n      });\n    \n      const toggleDrawer = (anchor, open) => (event) => {\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n          return;\n        }\n    \n        setSidebarState({ ...sidebarState, [anchor]: open });\n      };\n\n      const [universeDialogueOpen, setUniverseDialogueOpen] = useState(false);\n\n    const dispatch = useDispatch()\n    const currentWorld = useSelector(state=>state.worlds.currentWorld)\n    const history = useHistory()\n\n    function loadWorld(id) {\n        dispatch(fetchWorlds(id))\n            .then(data=>{\n                dispatch(changeView(data.payload.views[0]));\n                dispatch(changeFocus({\n                    x: data.payload.views[0].focus_x,\n                    y: data.payload.views[0].focus_y,\n                }));\n                dispatch(changeUserFocus({\n                    x: data.payload.views[0].focus_x,\n                    y: data.payload.views[0].focus_y,\n                }));\n                dispatch(fetchGrids(data.payload.views[0].tile_id))\n                // .then(console.log)\n            })\n    }\n\n    useEffect(() => {\n        dispatch(fetchShapeTypes())\n        .then(()=>{\n            dispatch(fetchUniverses())\n        .then(data=>{\n            if (data.payload.length===0) {\n                setUniverseDialogueOpen(true);\n            } else {\n                if (data.payload[0].worlds.length===0) {\n                    history.push(`/universes/${data.payload[0].id}`)\n                } else {\n                    let worldIdToGet = currentWorld.title ? currentWorld.id : data.payload[0].worlds[0].id; \n                    loadWorld(worldIdToGet);\n                }\n            }\n        })})\n    }, [dispatch])\n\n    return (\n        <main>\n            <Appbar \n                toggleDrawer={toggleDrawer}\n            />\n            <Sidebar \n                toggleDrawer={toggleDrawer}\n                sidebarState={sidebarState}\n                setUniverseDialogueOpen={setUniverseDialogueOpen}\n                loadWorld={loadWorld}\n            />\n            <Switch>\n                <Route path=\"/viewer\">\n                    <Viewport />\n                    <InfoBar />\n                </Route>\n                <Route path=\"/universes/:id\">\n                    <UniversePage loadWorld={loadWorld}/>\n                </Route>\n                <Redirect to=\"/viewer\" />\n            </Switch>\n            <FormDialog\n                formDialogueOpen={universeDialogueOpen}\n                setFormDialogueOpen={setUniverseDialogueOpen}\n                formDialogueObject={{\n                    item: \"universe\",\n                    field: \"title\",\n                    postConfig: {\n                        title: \"\"\n                    },\n                    action: \"postUniverse\"\n                }}\n            />\n        </main>\n    )\n}\n\nexport default AuthenticatedApp","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Redirect, useHistory, Link } from 'react-router-dom'\nimport { userUpdate } from './userSlice'\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport FormLabel from '@mui/material/FormLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nfunction Login() {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const dispatch = useDispatch()\n  \n  const handleSubmit = (event) => {\n    event.preventDefault()\n    fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({username, password})\n    })\n      .then(res => {\n        if (res.ok) {\n          res.json().then(user => {\n            dispatch(userUpdate(user))\n            history.push('/viewer')\n          })\n        } else {\n          res.json().then(errors => {\n            console.error(errors)\n          })\n        }\n      })\n  }\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        padding: '10px',\n        width: 'auto',\n        margin: 'auto',\n        '& > :not(style)': {\n          m: 1,\n          // width: 128,\n          // height: 128,\n        },\n      }}\n      width=\"auto\"\n    >\n      <Redirect to=\"/\" />\n      <Paper \n        elevation={3}\n        sx={{padding: '10px'}}\n        >\n          <Typography>SVG Fantasy Mapmaker</Typography>\n      <FormControl onSubmit={handleSubmit}>\n          <FormLabel \n            htmlFor=\"username\"\n            sx={{margin: '10px'}}\n          >\n            Login\n          </FormLabel>\n          <TextField id=\"outlined-basic\" label=\"Username\" variant=\"outlined\"\n          sx={{margin: '10px'}}\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)} />\n          <TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\"\n          sx={{margin: '10px'}}\n          type=\"password\"\n          name=\"\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)} />\n          <Button variant=\"contained\" onClick={handleSubmit}>Log In</Button>\n        <p><Link to=\"/signup\">Sign Up</Link></p>\n      </FormControl>\n      </Paper>\n    </Box>\n  )\n}\n\nexport default Login","import React, { useState } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { userUpdate } from './userSlice'\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport FormLabel from '@mui/material/FormLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Button from '@mui/material/Button';\nimport FormDialog from '../../components/FormDialog';\nimport Typography from '@mui/material/Typography';\n\nfunction Signup({ setCurrentUser }) {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [passwordConfirmation, setPasswordConfirmation] = useState('')\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    fetch('api/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password_confirmation: passwordConfirmation\n      })\n    })\n      .then(res => {\n        if (res.ok) {\n          res.json().then(user => {\n            dispatch(userUpdate(user))\n          })\n        } else {\n          res.json().then(errors => {\n            console.error(errors)\n          })\n        }\n      })\n  }\n  return (\n    <div className=\"authForm\">\n      <Box\n      sx={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        padding: '10px',\n        width: 'auto',\n        margin: 'auto',\n        '& > :not(style)': {\n          m: 1,\n          // width: 128,\n          // height: 128,\n        },\n      }}\n      width=\"auto\"\n    >\n      <Paper \n        elevation={3}\n        sx={{padding: '10px'}}\n        >\n      <FormControl onSubmit={handleSubmit}>\n      <Typography>SVG Fantasy Mapmaker</Typography>\n          <FormLabel \n            htmlFor=\"username\"\n            sx={{margin: '10px'}}\n          >\n            Login\n          </FormLabel>\n          <TextField id=\"outlined-basic\" label=\"Username\" variant=\"outlined\"\n          sx={{margin: '10px'}}\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)} />\n          <TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\"\n          sx={{margin: '10px'}}\n          type=\"password\"\n          name=\"\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)} />\n          <TextField id=\"outlined-basic\" label=\"Retype Password\" variant=\"outlined\"\n          sx={{margin: '10px'}}\n          type=\"password\"\n            name=\"password_confirmation\"\n            value={passwordConfirmation}\n            onChange={(e) => setPasswordConfirmation(e.target.value)} />\n          <Button variant=\"contained\" onClick={handleSubmit}>Sign Up</Button>\n        <p><Link to=\"/login\">Login</Link></p>\n      </FormControl>\n      </Paper>\n    </Box>\n    </div>\n  )\n}\n\nexport default Signup","import { Switch, Route, Redirect } from \"react-router-dom\"\nimport Login from \"../features/auth/Login\"\nimport Signup from \"../features/auth/Signup\"\n\nfunction UnauthenticatedApp({ setCurrentUser }) {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n            <Login \n                setCurrentUser={setCurrentUser}\n            />\n            </Route>\n            <Route exact path=\"/signup\">\n            <Signup \n                setCurrentUser={setCurrentUser}\n            />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    )\n}\n\nexport default UnauthenticatedApp","import styled from 'styled-components';\nimport React, { useState, useEffect } from 'react'\nimport AuthenticatedApp from './AuthenticatedApp'\nimport UnauthenticatedApp from './UnauthenticatedApp'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { userUpdate } from '../features/auth/userSlice.js'\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null)\n  const [authChecked, setAuthChecked] = useState(false)\n  const user = useSelector((state)=>state.user.current)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    fetch('/api/me', {\n      credentials: 'include'\n    })\n      .then(res => {\n        if (res.ok) {\n          res.json().then((user) => {\n            dispatch(userUpdate(user))\n            setAuthChecked(true)\n          })\n        } else {\n          setAuthChecked(true)\n        }\n      })\n  }, [])\n\n  if(!authChecked) { return <div></div>}\n  return (\n    <AppWindow className=\"App\">\n      {user.id ? (\n        <AuthenticatedApp />\n      ) : (\n        <UnauthenticatedApp \n          setCurrentUser={setCurrentUser}\n        />\n      )}\n    </AppWindow>\n  );\n}\n\nconst AppWindow = styled.div`\n  height: 100%;\n  width: 100%\n`\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n// import all your reducers from the slice files\nimport worldsReducer from './features/worlds/worldsSlice.js'\nimport userReducer from './features/auth/userSlice.js'\nimport universesReducer from './features/universes/universesSlice'\nimport gridsReducer from './features/tiles/gridsSlice'\nimport viewReducer from \"./features/viewport/viewSlice.js\";\nimport shapeTypesReducer from \"./features/shapes/shapeTypesSlice.js\";\n\nconst store = configureStore({\n  reducer: {\n    grids: gridsReducer,\n    shapeTypes: shapeTypesReducer,\n    universes: universesReducer,\n    user: userReducer,\n    view: viewReducer,\n    worlds: worldsReducer\n  },\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './components/App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport store from \"./store.js\";\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}